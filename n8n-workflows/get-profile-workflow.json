{
  "name": "Get Profile (Dashboard)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "get-profile",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-get-profile",
      "name": "Webhook Get Profile",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "get-profile"
    },
    {
      "parameters": {
        "jsCode": "const authHeader = $input.item.json.headers?.authorization || $input.item.json.body?.token;\nconst token = authHeader?.replace('Bearer ', '');\n\nif (!token) {\n  return {\n    json: {\n      success: false,\n      error: 'Token requis',\n      respondWithError: true\n    }\n  };\n}\n\nreturn {\n  json: {\n    token: token\n  }\n};"
      },
      "id": "code-extract-token",
      "name": "Extract Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT user_id FROM sessions WHERE access_token = '{{ $json.token }}' AND expires_at > NOW() LIMIT 1",
        "options": {}
      },
      "id": "postgres-verify-token",
      "name": "Verify Token",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [680, 300],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "RCIgOlmToK7XFEry",
          "name": "job_automation_db"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const result = $input.first().json;\n\nif (!result || !result.user_id) {\n  return {\n    json: {\n      success: false,\n      error: 'Token invalide ou expiré',\n      respondWithError: true\n    }\n  };\n}\n\nreturn {\n  json: {\n    userId: result.user_id\n  }\n};"
      },
      "id": "code-check-token",
      "name": "Check Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, email, first_name, last_name, is_verified, is_active, created_at FROM users WHERE id = '{{ $json.userId }}'",
        "options": {}
      },
      "id": "postgres-get-user",
      "name": "Get User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1120, 300],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "RCIgOlmToK7XFEry",
          "name": "job_automation_db"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const user = $input.first().json;\n\nif (!user || !user.id) {\n  return {\n    json: {\n      success: false,\n      error: 'Utilisateur non trouvé',\n      respondWithError: true\n    }\n  };\n}\n\nreturn {\n  json: {\n    userId: user.id,\n    email: user.email,\n    firstName: user.first_name,\n    lastName: user.last_name,\n    isVerified: user.is_verified,\n    isActive: user.is_active,\n    createdAt: user.created_at\n  }\n};"
      },
      "id": "code-extract-user",
      "name": "Extract User Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, first_name, last_name, email, phone, location, current_title, years_experience, education_level, skills, languages, desired_positions, desired_sectors, desired_locations, min_salary, contract_types, base_cv_url, linkedin_url, portfolio_url, active FROM candidates WHERE email = '{{ $json.email }}' LIMIT 1",
        "options": {}
      },
      "id": "postgres-get-candidate",
      "name": "Get Candidate",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 100],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "RCIgOlmToK7XFEry",
          "name": "job_automation_db"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COUNT(*) as total, COUNT(*) FILTER (WHERE status = 'sent') as sent, COUNT(*) FILTER (WHERE response_received = true) as responded, COUNT(*) FILTER (WHERE interview_scheduled = true) as interview, COUNT(*) FILTER (WHERE outcome = 'accepted') as accepted FROM applications WHERE candidate_id = (SELECT id FROM candidates WHERE email = '{{ $json.email }}' LIMIT 1)",
        "options": {}
      },
      "id": "postgres-get-stats",
      "name": "Get Statistics",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 300],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "RCIgOlmToK7XFEry",
          "name": "job_automation_db"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT a.id, a.status, a.sent_at, a.response_received, a.interview_scheduled, a.outcome, j.title, j.location, c.name as company_name FROM applications a LEFT JOIN job_offers j ON a.job_offer_id = j.id LEFT JOIN companies c ON a.company_id = c.id WHERE a.candidate_id = (SELECT id FROM candidates WHERE email = '{{ $json.email }}' LIMIT 1) ORDER BY a.sent_at DESC LIMIT 10",
        "options": {}
      },
      "id": "postgres-get-applications",
      "name": "Get Applications",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 500],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "RCIgOlmToK7XFEry",
          "name": "job_automation_db"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const userResult = $('Extract User Data').first().json;\nconst candidateData = $('Get Candidate').first().json;\nconst statsResult = $('Get Statistics').first().json;\nconst applicationsData = $('Get Applications').all();\n\nconst candidate = candidateData && candidateData.id ? {\n  id: candidateData.id,\n  firstName: candidateData.first_name,\n  lastName: candidateData.last_name,\n  email: candidateData.email,\n  phone: candidateData.phone,\n  location: candidateData.location,\n  currentTitle: candidateData.current_title,\n  yearsExperience: candidateData.years_experience,\n  educationLevel: candidateData.education_level,\n  skills: candidateData.skills,\n  languages: candidateData.languages,\n  desiredPositions: candidateData.desired_positions,\n  desiredSectors: candidateData.desired_sectors,\n  desiredLocations: candidateData.desired_locations,\n  minSalary: candidateData.min_salary,\n  contractTypes: candidateData.contract_types,\n  cvUrl: candidateData.base_cv_url,\n  linkedinUrl: candidateData.linkedin_url,\n  portfolioUrl: candidateData.portfolio_url,\n  active: candidateData.active\n} : null;\n\nconst stats = statsResult ? {\n  total: parseInt(statsResult.total || 0),\n  sent: parseInt(statsResult.sent || 0),\n  responded: parseInt(statsResult.responded || 0),\n  interview: parseInt(statsResult.interview || 0),\n  accepted: parseInt(statsResult.accepted || 0)\n} : { total: 0, sent: 0, responded: 0, interview: 0, accepted: 0 };\n\nconst recentApplications = applicationsData && applicationsData.length > 0 ? applicationsData.map(app => ({\n  id: app.json.id,\n  status: app.json.status,\n  sent_at: app.json.sent_at,\n  response_received: app.json.response_received,\n  interview_scheduled: app.json.interview_scheduled,\n  outcome: app.json.outcome,\n  title: app.json.title,\n  location: app.json.location,\n  company_name: app.json.company_name\n})) : [];\n\nreturn {\n  json: {\n    user: {\n      id: userResult.userId,\n      email: userResult.email,\n      firstName: userResult.firstName,\n      lastName: userResult.lastName,\n      isVerified: userResult.isVerified,\n      isActive: userResult.isActive,\n      createdAt: userResult.createdAt\n    },\n    candidate: candidate,\n    statistics: stats,\n    recentApplications: recentApplications\n  }\n};"
      },
      "id": "code-merge-data",
      "name": "Merge Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"data\": $json\n} }}",
        "options": {}
      },
      "id": "respond-success",
      "name": "Respond Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"error\": $json.error\n} }}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "respond-error",
      "name": "Respond Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [900, 500]
    }
  ],
  "connections": {
    "Webhook Get Profile": {
      "main": [
        [
          {
            "node": "Extract Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Token": {
      "main": [
        [
          {
            "node": "Verify Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Token": {
      "main": [
        [
          {
            "node": "Check Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Token": {
      "main": [
        [
          {
            "node": "Get User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User": {
      "main": [
        [
          {
            "node": "Extract User Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract User Data": {
      "main": [
        [
          {
            "node": "Get Candidate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Statistics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Applications",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Candidate": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Statistics": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Applications": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Respond Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c20750a766bf706ae816bbff3777385b2eef92cf9418f2aea21c75d2277c69c2"
  }
}
